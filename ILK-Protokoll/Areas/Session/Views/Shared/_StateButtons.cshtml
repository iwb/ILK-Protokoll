@using ILK_Protokoll.Models
@using ILK_Protokoll.util
@model ILK_Protokoll.Models.TopicLock
@{
	bool isReporting = ViewBag.Reporting ?? false;

	var classes = new string[4];

	switch (Model.Action)
	{
		case TopicAction.None:
			classes[0] = " active";
			break;
		case TopicAction.Decide:
			classes[1] = " active";
			break;
		case TopicAction.Close:
			classes[2] = " active";
			break;
		case TopicAction.Delete:
			classes[3] = " active";
			break;
		default:
			throw new ArgumentOutOfRangeException();
	}
}

<div class="clearfix">
	<div class="pull-left">
		@Ajax.ActionLink("Wiedervorlage", "_ChangeState", "Discussion", new {id = Model.TopicID, state = TopicAction.None, view = "Panels"},
		new AjaxOptions
		{
			HttpMethod = "POST",
			InsertionMode = InsertionMode.Replace,
			UpdateTargetId = "state_buttons_" + Model.TopicID,
			OnSuccess = "enableDatePicker();"
		}, new {@class = "btn btn-hover-primary" + classes[0]})

		@Ajax.ActionLink("Beschluss", "_ChangeState", "Discussion", new {id = Model.TopicID, state = TopicAction.Decide, view = "Panels"},
		new AjaxOptions
		{
			HttpMethod = "POST",
			InsertionMode = InsertionMode.Replace,
			UpdateTargetId = "state_buttons_" + Model.TopicID
		}, new {@class = "btn btn-hover-success" + classes[1]})

		@Ajax.ActionLink("Kein Beschluss", "_ChangeState", "Discussion", new {id = Model.TopicID, state = TopicAction.Close, view = "Panels"},
		new AjaxOptions{
			HttpMethod = "POST",
			InsertionMode = InsertionMode.Replace,
			UpdateTargetId = "state_buttons_" + Model.TopicID
		}, new {@class = "btn btn-hover-warning" + classes[2]})

		@Ajax.ActionLink("Löschen", "_ChangeState", "Discussion", new {id = Model.TopicID, state = TopicAction.Delete, view = "Panels"},
		new AjaxOptions
		{
			HttpMethod = "POST",
			InsertionMode = InsertionMode.Replace,
			UpdateTargetId = "state_buttons_" + Model.TopicID
		}, new {@class = "btn btn-hover-danger" + classes[3]})
	</div>
	<div class="pull-left" style="margin-left: 2ex;">
		@if (Model.Action == TopicAction.None)
		{
			using (Ajax.BeginForm("_ChangeResubmissionDate", "Discussion", new {Area = "Session"}, new AjaxOptions
			{
				HttpMethod = "POST",
				OnBegin = "ShowLoading(" + Model.TopicID + ");",
				OnSuccess = "ShowSuccess(" + Model.TopicID + ");",
				OnFailure = "ShowFailure(" + Model.TopicID + ");"
			}, new
			{
				@class = "form-inline",
				style = "display:inline-block;white-space:nowrap;"
			}))
			{
				@Html.Hidden("topicID", Model.TopicID)
				<label class="sr-only">Wiedervorlagedatum:</label>
				<div class="has-feedback" style="display: inline-block">
					@{
						var val = Model.Topic.ResubmissionDate;
						string datevalue = val.HasValue ? val.Value.ToString("yyyy-MM-dd") : "";
					}
					<label for="resubmissionDate" class="control-label">Datum:</label>

					<input class="form-control" style="display: inline-block; width: auto;" data-val="true" data-val-date="Das Feld &quot;Wiedervorlagedatum&quot; muss eine Datumsangabe sein." id="Topic_@(Model.TopicID)_ResubmissionDate" name="resubmissionDate" type="date" value="@datevalue" onchange=" RemoveIndicator(@Model.TopicID); "/>
					@Html.ValidationMessageFor(model => model.Topic.ResubmissionDate, "", new {@class = "text-danger"})
					<i style="top: 0;" class="glyphicon glyphicon-ok form-control-feedback collapse"></i>
					<i style="top: 0;" class="glyphicon glyphicon-remove  form-control-feedback collapse"></i>
				</div>
				<button type="submit" class="btn btn-default">
					<span class="glyphicon glyphicon-check"></span></button>
			}
			<div style="float: right; height: 34px; margin-left: 10px; position: relative; width: 34px;">
				<span class="ajax-spinner"></span>
			</div>
		}
	</div>
	@if (!string.IsNullOrWhiteSpace(Model.Message))
	{
		<div class="text-danger pull-left" style="margin-top: 5px;">@Model.Message</div>
	}
</div>


@using (Html.Delayed(null, "Ajax-Spinner"))
{
	<script type="text/javascript" src="~/Scripts/spin.js"></script>
	<script type="text/javascript">
		var opts = {
			lines: 11, // The number of lines to draw
			length: 4, // The length of each line
			width: 2, // The line thickness
			radius: 5, // The radius of the inner circle
			corners: 1, // Corner roundness (0..1)
			rotate: 0, // The rotation offset
			direction: 1, // 1: clockwise, -1: counterclockwise
			color: '#000', // #rgb or #rrggbb or array of colors
			speed: 1, // Rounds per second
			trail: 60, // Afterglow percentage
			shadow: false, // Whether to render a shadow
			hwaccel: true, // Whether to use hardware acceleration
			className: 'spinner', // The CSS class to assign to the spinner
			zIndex: 2e9, // The z-index (defaults to 2000000000)
			top: '50%', // Top position relative to parent
			left: '50%' // Left position relative to parent
		};
		var ajaxspinner = new Spinner(opts);

		function RemoveIndicator(id) {
			$('#state_buttons_' + id + ' .has-feedback').removeClass("has-success has-error");
			$('#state_buttons_' + id + ' i.glyphicon').hide();
		}

		function ShowLoading(id) {
			ajaxspinner.spin($('#state_buttons_' + id + ' .ajax-spinner')[0]);
			RemoveIndicator(id);
		}

		function ShowSuccess(id) {
			ajaxspinner.stop($('#state_buttons_' + id + ' .ajax-spinner')[0]);
			$('#state_buttons_' + id + ' .has-feedback').addClass("has-success");
			$('#state_buttons_' + id + ' i.glyphicon-ok').show();
		}

		function ShowFailure(id) {
			ajaxspinner.stop($('#state_buttons_' + id + ' .ajax-spinner')[0]);
			$('#state_buttons_' + id + ' .has-feedback').addClass("has-error");
			$('#state_buttons_' + id + ' i.glyphicon-remove').show();
		}
	</script>
}