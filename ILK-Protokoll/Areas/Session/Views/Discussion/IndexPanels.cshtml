@using ILK_Protokoll.Areas.Session.Models
@using ILK_Protokoll.util
@model ILK_Protokoll.ViewModels.FilteredTopics

@{
	ViewBag.Title = "Diskussion";
	var session = (ActiveSession)ViewBag.CurrentSession;
}

<ul class="nav nav-pills" style="margin-top: 15px;">
	<li class="active">@Html.ActionLink("Paneele", "Index", "Discussion", new {Area = "Session", viewPref = "Panels"}, null)</li>
	<li>@Html.ActionLink("Tabelle", "Index", "Discussion", new {Area = "Session", viewPref = "Table"}, null)</li>
</ul>

<div class="index-action">
	<a class="btn btn-default" onclick=" collapseTopicsOut(); "> Alle Themen ausklappen</a>
	<a class="btn btn-default" onclick=" collapseTopicsIn(); "> Alle Themen einklappen</a>
	@Html.ActionLink("Zurück", "Index", "Lists", new {Area = "Session"}, new {@class = "btn btn-default"})
	@Html.ActionLink("Weiter", "Index", "Finalize", new {Area = "Session"}, new {@class = "btn btn-primary"})
</div>

<h2>@ViewBag.Title</h2>

<div class="panel panel-primary">
	<div class="panel-heading">
		<h4 class="panel-title">Filter</h4>
	</div>
	<div class="panel-body">
		@using (Html.BeginForm("Index", "Discussion", new {Area = "Session"}, FormMethod.Get, new {@class = "form-inline"}))
		{
			<div class="col-sm-4">
				<div class="row">
					<div class="form-group">
						@Html.DropDownListFor(model => model.ShowPriority, Model.PriorityList, new {@class = "form-control", style = "min-width:200px;"})
					</div>
				</div>
				<div class="row">
					<div class="form-group">
						@Html.DropDownListFor(model => model.Timespan, Model.TimespanList, "(Zeitraum beliebig)", new {@class = "form-control", style = "min-width:200px;"})
					</div>
				</div>
			</div>

			<div class="col-sm-4">
				<div class="row">
					<div class="form-group">
						@Html.DropDownListFor(m => m.OwnerID, Model.UserList, "(Alle Besitzer)", new {@class = "form-control", style = "min-width:180px;"})
					</div>
				</div>
				<div class="row">
					<div class="form-group">
						<input type="submit" value="Filtern" class="btn btn-primary" />
					</div>
				</div>
			</div>
		}
	</div>
</div>

<div class="row" id="topicsContainer">
	@foreach (var topic in Model.Topics)
	{
		<div class="col-xs-12  col-lg-6">
			<div class="buttongroup" id="state_buttons_@topic.ID">
				@if (topic.IsLocked)
				{
					Html.RenderPartial("_StateButtons", topic.Lock);
				}
				else
				{
					@:Dieser Punkt wird momentan in die Sitzung &quot;@topic.TargetSessionType.Name&quot; verschoben. In dieser Sitzung kann er daher nicht beschlossen werden.
				}
			</div>
			@{ Html.RenderPartial("~/Views/Topics/_Topic.cshtml", topic); }
		</div>
	}
</div>

@using (Html.Delayed(null, "Masonry_Tiles"))
{
	<script type="text/javascript">
		var msnry = new Masonry('#topicsContainer', {
			itemSelector: '.col-lg-6',
			resizeable: true
		});
	</script>
}

@using (Html.Delayed(null, "CollapseTopics"))
{
	<script type="text/javascript">
		function collapseTopicsOut() {

			$('.topic-content').show(); // Workaround, damit sich die GUI-Elemente nicht während der Animation überlappen
			PerformMasonryLayout();
			$('.topic-content').hide();

			$('.topic-panel').each(function() {
				var link = $(this).find('.panel-heading .panel-collapse-heading a');
				var content = $(this).find('.topic-content');
				collapseTopicOut(link, content);
			});
		}

		function collapseTopicsIn() {
			$('.topic-panel').each(function() {
				var link = $(this).find('.panel-heading .panel-collapse-heading a');
				var content = $(this).find('.topic-content');
				collapseTopicIn(link, content);
			});
		}
	</script>
}