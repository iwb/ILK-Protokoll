@using ILK_Protokoll.Areas.Session.Models
@using ILK_Protokoll.Models
@using ILK_Protokoll.util
@model ILK_Protokoll.ViewModels.FilteredTopics

@{
	ViewBag.Title = "Diskussion";
	var session = (ActiveSession)ViewBag.CurrentSession;
}

<ul class="nav nav-pills" style="margin-top: 15px;">
	<li>@Html.ActionLink("Paneele", "Index", "Discussion", new {Area = "Session", viewPref = "Panels"}, null)</li>
	<li class="active">@Html.ActionLink("Tabelle", "Index", "Discussion", new {Area = "Session", viewPref = "Table"}, null)</li>
</ul>

<div class="index-action">
	<a class="btn btn-default" onclick=" collapseTopicsOut(); "> Alle Themen ausklappen</a>
	<a class="btn btn-default" onclick=" collapseTopicsIn(); "> Alle Themen einklappen</a>
	@Html.ActionLink("Zurück", "Index", "Lists", new {Area = "Session"}, new {@class = "btn btn-default"})
	@Html.ActionLink("Weiter", "Index", "Finalize", new {Area = "Session"}, new {@class = "btn btn-primary"})
</div>

<h2>@ViewBag.Title</h2>

<div class="panel panel-primary">
	<div class="panel-heading">
		<h4 class="panel-title">Filter</h4>
	</div>
	<div class="panel-body">
		@using (Html.BeginForm("Index", "Discussion", new {Area = "Session"}, FormMethod.Get, new {@class = "form-inline"}))
		{
			<div class="col-sm-4">
				<div class="row">
					<div class="form-group">
						@Html.DropDownListFor(model => model.ShowPriority, Model.PriorityList, new {@class = "form-control", style = "min-width:200px;"})
					</div>
				</div>
				<div class="row">
					<div class="form-group">
						@Html.DropDownListFor(model => model.Timespan, Model.TimespanList, "(Zeitraum beliebig)", new {@class = "form-control", style = "min-width:200px;"})
					</div>
				</div>
			</div>

			<div class="col-sm-4">
				<div class="row">
					<div class="form-group">
						@Html.DropDownListFor(m => m.OwnerID, Model.UserList, "(Alle Besitzer)", new {@class = "form-control", style = "min-width:180px;"})
					</div>
				</div>
				<div class="row">
					<div class="form-group">
						<input type="submit" value="Filtern" class="btn btn-primary" />
					</div>
				</div>
			</div>
		}
	</div>
</div>

<table class="table table-striped table-hover table-sortable">
	<thead>
		<tr>
			<th class="col-sm-1">
				Status
			</th>
			<th class="col-sm-1">
				@Html.DisplayColumnNameFor(Model.Topics, model => model.Time)
			</th>
			<th class="col-sm-1">
				@Html.DisplayColumnNameFor(Model.Topics, model => model.Priority)
			</th>
			<th>
				@Html.DisplayColumnNameFor(Model.Topics, model => model.Title)
			</th>
			<th class="col-sm-1">
				@Html.DisplayColumnNameFor(Model.Topics, model => model.Votes)
			</th>
			<th class="col-sm-1">
				ToDos
			</th>
			<th class="col-sm-1 hidden-xs">
				@Html.DisplayColumnNameFor(Model.Topics, model => model.Comments)
			</th>
			<th class="col-sm-1">
				Aktion
			</th>
			<th class="hidden-xs">
				WVD
			</th>
		</tr>
	</thead>
	<tbody>
		@foreach (Topic item in Model.Topics)
		{
			<tr>
				<td>
					@if (item.IsUnreadBy(ViewBag.CurrentUser.ID))
					{
						<span class="sr-only">Unbearbeitet</span>
						<span style="color: #D48625; display: inline-block; float: left; font-size: 180%; margin: 2px 16px 0 0;">
							<span class="glyphicon glyphicon-asterisk"></span>
						</span>
					}
					else
					{
						<span class="sr-only">z Bearbeitet</span>
					}
				</td>
				<td>
					@Html.DisplayFor(modelItem => item.Time)
				</td>
				<td>
					@item.Priority.DisplayName()
				</td>
				<td>
					<a href="@Url.Action("Details", "Topics", new {Area = "", id = item.ID})">@item.Title.Shorten(60)</a>
					@foreach (var tag in item.Tags)
					{
						@Html.DisplayFor(model => tag.Tag)
					}
				</td>
				@{
					var votesApproved = item.Votes.Count(v => v.Kind == VoteKind.Approved);
					var votesOverall = item.Votes.Count;
					var cellclass = votesApproved == votesOverall ? "success" : null;
				}
				<td class="@cellclass text-center">
					@(votesApproved)&#8202;/&#8202;@votesOverall
				</td>
				@{
					var todoList = item.Assignments.Where(a => a.Type == AssignmentType.ToDo && a.IsActive)
						.Select(a => a.IsDone).ToList();
					var doneToDo = todoList.Count(t => t);
					cellclass = doneToDo == todoList.Count ? "success" : null;
				}
				<td class="@cellclass text-center">
					@(doneToDo)&#8202;/&#8202;@todoList.Count
				</td>
				<td class="hidden-xs">
					@item.Comments.Count
				</td>
				<td>
					@{ Html.RenderPartial("_StateDropdown", item.Lock); }
				</td>
				<td class="hidden-xs" style="text-align: right;" id="resubmissionCell_@item.ID">
					@{
						string valuestr = null;
					}
					<span class="datestr">
						@if (item.ResubmissionDate != null)
						{
							@item.ResubmissionDate.Value.ToString("dd.MM")
							valuestr = item.ResubmissionDate.Value.ToString("yyyy-MM-dd");
						}
					</span>
					<br />
					<span class="text-success glyphicon glyphicon-ok" style="display: none;"></span>
					<span class="text-danger glyphicon glyphicon-remove" style="display: none;"></span>
					<input type="hidden" name="resubmissionDate" id="resubmissionDate_@item.ID" data-topicid="@item.ID" value="@valuestr" />
				</td>
			</tr>
		}
	</tbody>
</table>

<script type="text/javascript">
	$('input[name="resubmissionDate"]').each(function() {
		var topicId = $(this).data("topicid");

		$(this).datepicker({
			buttonImage: '../img/icon_calendar.png',
			buttonImageOnly: true,
			buttonText: "Wiedervorlagedatum auswählen",
			showOn: 'both',

			dateFormat: "yy-mm-dd",
			constrainInput: false,
			showOtherMonths: true,
			selectOtherMonths: true,
			numberOfMonths: 2,
			showWeek: true,
			firstDay: 1,
			monthNames: [
				'Januar', 'Februar', 'M&auml;rz', 'April', 'Mai', 'Juni',
				'Juli', 'August', 'September', 'Oktober', 'November', 'Dezember'
			],
			monthNamesShort: [
				'Jan', 'Feb', 'M&auml;r', 'Apr', 'Mai', 'Jun',
				'Jul', 'Aug', 'Sep', 'Okt', 'Nov', 'Dez'
			],
			dayNames: ['Sonntag', 'Montag', 'Dienstag', 'Mittwoch', 'Donnerstag', 'Freitag', 'Samstag'],
			dayNamesShort: ['So', 'Mo', 'Di', 'Mi', 'Do', 'Fr', 'Sa'],
			dayNamesMin: ['So', 'Mo', 'Di', 'Mi', 'Do', 'Fr', 'Sa'],
			weekHeader: 'KW',
			onSelect: function(dateText, inst) {
				var date = $(this).datepicker("getDate");

				var datestr = 'null';
				var localestr = '';

				if (date > new Date()) {
					datestr = date.getFullYear() + '-' + (date.getMonth() + 1) + '-' + date.getDate();
					localestr = date.getDate() + '.' + (date.getMonth() + 1) + '.';
				}

				$.ajax({
					url: '@Url.Action("_ChangeResubmissionDate", "Discussion", new {Area = "Session"})',
					type: 'POST',
					data: {
						topicID: topicId,
						resubmissionDate: datestr,
						"X-Requested-With": "XMLHttpRequest"
					},
					success: function(responseData) {
						$('#resubmissionCell_' + topicId + ' .glyphicon-remove').hide();
						$('#resubmissionCell_' + topicId + ' .glyphicon-ok').finish().slideDown(400).fadeOut(1000);
						$('#resubmissionCell_' + topicId + ' .datestr').text(localestr);
					},
					error: function(xhr, errorType) {
						$('#resubmissionCell_' + topicId + ' .glyphicon-ok').hide();
						$('#resubmissionCell_' + topicId + ' .glyphicon-remove').finish().slideDown(400);
						DisplayErrorMessage(null, xhr.responseText);
					}
				}); //end ajax
			}
		});
	});
</script>