@using ILK_Protokoll.util
@model ILK_Protokoll.Models.Assignment

@{
	ViewBag.Title = "Details (" + Model.Title + ")";
}

<div class="index-action">
	@Html.ActionLink("Bearbeiten", "Edit", new {id = Model.ID}, new {@class = "btn btn-primary"})
</div>

<h2>@ViewBag.Title</h2>

@Html.ActionLink("Zurück zum Index", "Index")<br />
@Html.ActionLink("Zurück zur Diskussion", "Details", "Topics", new {id = Model.TopicID}, null)

<hr />

<div>
	<dl class="dl-horizontal">
		<dt>
			@Html.DisplayNameFor(model => model.OwnerID)
		</dt>
		<dd>
			@Html.DisplayFor(model => model.Owner.LongName)
		</dd>

		<dt>
			@Html.DisplayNameFor(model => model.TopicID)
		</dt>
		<dd>
			@Html.DisplayFor(model => model.Topic.Title)
		</dd>

		<dt>
			@Html.DisplayNameFor(model => model.Type)
		</dt>
		<dd>
			@Model.Type.DisplayName()
		</dd>

		<dt>
			@Html.DisplayNameFor(model => model.Title)
		</dt>
		<dd>
			@Html.DisplayFor(model => model.Title)
		</dd>

		<dt>
			@Html.DisplayNameFor(model => model.Description)
		</dt>
		<dd>
			@Html.DisplayFor(model => model.Description, "String_Multiline")
		</dd>

		<dt>
			@Html.DisplayNameFor(model => model.DueDate)
		</dt>
		<dd>
			@Model.DueDate.ToShortDateString()
		</dd>

		<dt>
			@Html.DisplayNameFor(model => model.IsActive)
		</dt>
		<dd>
			@Html.DisplayFor(model => model.IsActive)
		</dd>

		<dt>
			@Html.DisplayNameFor(model => model.ReminderSent)
		</dt>
		<dd>
			@Html.DisplayFor(model => model.ReminderSent)
		</dd>

		<dt>
			@Html.DisplayNameFor(model => model.IsDone)
		</dt>
		<dd>
			@Html.DisplayFor(model => model.IsDone)
		</dd>
	</dl>
</div>

<div style="text-align: right;">
	@* ReSharper disable once ConvertIfStatementToConditionalTernaryExpression *@
	@if (Model.IsDone)
	{
		@Html.ActionLink("Aufgabe als offen markieren", "MarkAsOpen", new {id = Model.ID})
	}
	else
	{
		@Html.ActionLink("Aufgabe als erledigt markieren", "MarkAsDone", new {id = Model.ID})
	}
</div>