@using ILK_Protokoll.util
@model ILK_Protokoll.Models.Document
@{
	ViewBag.Title = "Details (" + Model.DisplayName + ")";
}

<h2>@ViewBag.Title</h2>
<hr/>
<div>
@if (Model.Deleted != null)
{
	<div class="alert alert-info">
		Diese Datei befindet sich im @Html.ActionLink("Papierkorb", "Index", "RecycleBin", new {Area = "Administration"}, new {@class = "alert-link"}).
	</div>
}
<dl class="dl-horizontal">
	@if (Model.TopicID != null)
	{
		<dt>@Html.DisplayNameFor(model => Model.TopicID)</dt>
		<dd>
			@Html.ActionLink(Model.Topic.Title, "Details", "Topics", new {Area = "", id = Model.TopicID}, null)
		</dd>
	}
	@if (Model.EmployeePresentationID != null)
	{
		<dt>@Html.DisplayNameFor(model => Model.EmployeePresentationID)</dt>
		<dd>
			@{
				string url = Request.Url != null ? Request.Url.PathAndQuery : null;
			}
			@Html.ActionLink(Model.EmployeePresentation.ToString(), "Edit", "LEmployeePresentations", new {Area = "Session", id = Model.EmployeePresentationID, returnURL = url}, null)
		</dd>
	}

	<dt>@Html.DisplayNameFor(model => model.DisplayName)</dt>
	<dd>
		@Html.DisplayFor(model => model.DisplayName)
	</dd>

	<dt>@Html.DisplayNameFor(model => model.Created)</dt>
	<dd>
		@Html.DisplayFor(model => model.Created)
	</dd>

	@if (Model.Deleted != null)
	{
		<dt>@Html.DisplayNameFor(model => model.Deleted)</dt>
		<dd>
			@Html.DisplayFor(model => model.Created)
		</dd>
	}

	<dt>@Html.DisplayNameFor(model => model.LatestRevision.FileSize)</dt>
	<dd>
		@Html.DisplayFor(model => model.LatestRevision.FileSize)
	</dd>

	@if (Model.LockTime != null)
	{
		<dt>@Html.DisplayNameFor(model => model.LockUser)</dt>
		<dd>
			@Html.DisplayFor(model => model.LockUser.LongName) (@Html.DisplayFor(model => model.LockTime))
		</dd>
	}
</dl>

@if (ViewBag.SeamlessEnabled && Model.LockUserID == ViewBag.CurrentUser.ID)
{
	<h3>Sie bearbeiten gerade eine Revision</h3>
	<div style="margin-bottom: 20px;">
		<div class="row">
			<div class="col-xs-12">
				<p style="max-width: 50em;">Sie bearbeiten gerade eine neue Revision. Währenddessen können keine (anderen) neuen Revisionen erzeugt werden. Wenn Sie die Bearbeitung abgeschlossen haben, klicken Sie auf "Bearbeitung abschließen", um die Revision zu sichern und für andere Benutzer zugänglich zu machen.</p>
			</div>
		</div>
		<div class="row">
			<div class="col-sm-2">
				@using (Html.BeginForm("CancelNewRevision", "Attachments", new {id = Model.ID}, FormMethod.Get,
					new {@class = "form-horizontal"}))
				{
					<button type="submit" class="btn btn-danger">Verwerfen</button>
				}
			</div>
			<div class="col-sm-offset-6 col-sm-2">
				@if (ViewBag.TempFileURL != null)
				{
					<a href="@ViewBag.TempFileURL" class="btn btn-primary" id="openTempFileLink">Datei öffnen</a>
					using (Html.Delayed(null, "openTempFileLinkScript"))
					{
						<script type="text/javascript">
							$('#openTempFileLink').click(function(elem) {
								try {
									var objShell = new ActiveXObject("shell.application");
									objShell.ShellExecute($('#openTempFileLink')[0].href);
									return false;
								} catch (e) {
									// Not sufficient trust, has to open the file manually...
								}
								return true;
							});
						</script>
					}
				}
			</div>
			<div class="col-sm-2">
				@using (Html.BeginForm("FinishNewRevision", "Attachments", new {id = Model.ID}, FormMethod.Get,
					new {@class = "form-horizontal"}))
				{
					<button type="submit" class="btn btn-primary">Bearbeitung abschließen</button>
				}
			</div>
		</div>
	</div>
}

<h3>Alle Versionen</h3>
<table class="table table-striped table-hover">
	<thead>
	<tr>
		<th class="col-sm-2">
			@Html.DisplayColumnNameFor(Model.Revisions, rev => rev.Created)
		</th>
		<th>
			@Html.DisplayColumnNameFor(Model.Revisions, rev => rev.Uploader)
		</th>
		<th class="col-sm-1">
			@Html.DisplayColumnNameFor(Model.Revisions, rev => rev.FileSize)
		</th>
		<th>
			Dateiname
		</th>
		<th class="col-sm-1">
		</th>
	</tr>
	</thead>
	<tbody>
	@foreach (var revision in Model.Revisions.OrderByDescending(rev => rev.Created))
	{
		<tr>
			<th>
				@Html.DisplayFor(model => revision.Created)
			</th>
			<th>
				@Html.DisplayFor(model => revision.Uploader.LongName)
			</th>
			<th>
				@Html.DisplayFor(model => revision.FileSize, "FileSize")
			</th>
			<th>
				@Html.DisplayFor(model => revision.FileName)
			</th>
			<th>
				@if (revision.Created > Model.LockTime)
				{
					<text>Wird&nbsp;bearbeitet</text>
				}
				else
				{
					@Html.ActionLink("Download",
						"Download",
						"Attachments",
						new {id = revision.GUID},
						new {@class = "btn btn-primary", target = "_blank"})
				}
			</th>
		</tr>
	}
	</tbody>
</table>

@if (!ViewBag.ShowUpload)
{
	<p>Es dürfen keine neuen Versionen hochgeladen werden.</p>
}
else
{
	if (ViewBag.SeamlessEnabled && Model.LockTime == null)
	{
		<h3>Nahtlose Bearbeitung</h3>

		using (Ajax.BeginForm("BeginNewRevision",
			"Attachments",
			new {Area = ""},
			new AjaxOptions
			{
				HttpMethod = "POST",
				OnSuccess = "OpenDocument(xhr, data);",
				OnFailure = "DisplayErrorMessage('beginNewRevisionForm', xhr.responseText);"
			}, new {@class = "form-horizontal", id = "beginNewRevisionForm"}))
		{
			@Html.HiddenFor(model => model.ID)
			<div style="max-width: 60em;">
				<p>
					Mit nahtloser Bearbeitung können Sie direkt neue Revisionen eines Dokuments anlegen. Nach dem Betätigen des Buttons wird intern die aktuelle Revision kopiert und für Sie zur Bearbeitung freigegeben. Sie können in dem Dokument beliebige Änderungen vornehmen und diese speichern. Sind ihre Änderungen abgeschlossen, klicken Sie im ILK-Protokoll auf "Bearbeitung abschließen" um die neue Revision zu sichern und anderen zugänglich zu machen. Sie brauchen die Datei somit nicht lokal speichern.
					<br/><small class="text-muted">Dieses Feature ist nur für Office-Dokumente im Internet Explorer nutzbar.</small>
				</p>
				<button type="submit" class="btn btn-primary">Neue Revision erzeugen</button>
			</div>
		}
		using (Html.Delayed(null, "openDocument"))
		{
			<script type="text/javascript">
				function OpenDocument(xhr, fileurl) {
					if (xhr.status === 201) {
						try {
							var objShell = new ActiveXObject("shell.application");
							objShell.ShellExecute(fileurl);
						} catch (e) {
							// Not sufficient trust, has to open the file manually...
						}
						location.reload();
					} else {
						alert(xhr.responseText);
					}
				}
			</script>
		}
	}

	<h3>Neue Version hochladen</h3>
	using (Html.BeginForm("CreateNewRevision",
		"Attachments",
		new {id = Model.ID},
		FormMethod.Post,
		new
		{
			@class = "form-horizontal",
			enctype = "multipart/form-data",
			id = "revisionUploadForm"
		}))
	{
		<div class="row">
			@Html.AntiForgeryToken()
			<label for="file" class="control-label col-sm-2">Datei auswählen:</label>
			<div class="col-sm-8">
				<input type="file" class="form-control" id="file" name="file"/>
			</div>
			<div class="col-sm-2">
				<button type="submit" class="btn btn-primary form-control">Hochladen</button>
			</div>
			<div id="attachment_uploader_status" class="col-sm-2 col-sm-offset-10"></div>
		</div>
	}

	using (Html.Delayed(null, "RevisionUpload"))
	{
		<script type="text/javascript">
			$('#revisionUploadForm').submit(function(e) {
				var formdata = new FormData(); //FormData object
				var fileInput = $('#file')[0];
				var hidden = $(this).children().children('input');

				// Iterating through the hidden fields
				for (var i = 0; i < hidden.length; i++) {
					formdata.append(hidden[i].name, hidden[i].value);
				}

				//Iterating through each files selected in fileInput
				for (i = 0; i < fileInput.files.length; i++) {
					//Appending each file to FormData object
					formdata.append(fileInput.files[i].name, fileInput.files[i]);
				}
				//Creating an XMLHttpRequest and sending
				var xhr = new XMLHttpRequest();
				xhr.open('POST', $(this).attr('action'));
				xhr.onreadystatechange = function() {
					if (xhr.readyState == 4) {
						if (xhr.status == 201) {
							window.location = xhr.responseText;
						} else {
							if (xhr.responseText.length > 0) {
								$('#attachment_uploader_status').html('<span class="text-danger">' + xhr.responseText + '</span>');
							} else {
								$('#attachment_uploader_status').html('<span class="text-danger">' + xhr.statusText + '</span>');
							}
						}
					}
				};
				xhr.setRequestHeader("X-Requested-With", "XMLHttpRequest");
				xhr.send(formdata);
				e.preventDefault();
				e.stopImmediatePropagation();
			});
		</script>
	}
}
</div>