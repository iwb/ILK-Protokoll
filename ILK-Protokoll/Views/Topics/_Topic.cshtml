@using ILK_Protokoll.Models
@using ILK_Protokoll.util
@using ILK_Protokoll.ViewModels
@model ILK_Protokoll.Models.Topic

<div class="panel panel-primary topic-panel">
	<div class="panel-heading">
		<div class="panel-title-right">
			<p>
				<span class="label label-default">@Model.Time</span>
				@{
					switch (Model.Priority)
					{
						case Priority.Low:
							@: <span class="label label-info">Niedrig</span>
							break;

						case Priority.Medium:
							@: <span class="label label-warning">Mittel</span>
							break;

						case Priority.High:
							@: <span class="label label-danger">Wichtig</span>
							break;
					}
				}
				<span class="usertile">@Model.Owner</span>
			</p>
			<p>Geändert @Html.DisplayFor(model => model.ValidFrom)</p>
		</div>
		@if (Model.IsUnreadBy(ViewBag.CurrentUser.ID))
		{
			<span style="color: #D48625; display: inline-block; float: left; font-size: 180%; margin: 2px 16px 0 0;">
				<span class="glyphicon glyphicon-asterisk"></span>
			</span>
		}
		<span class="panel-collapse-heading" style="display: inline-block; float: left; font-size: 180%; margin: 2px 16px 0 -12px;">
			<a onclick=" toggleSection(this, '#topicContent_@Model.ID'); " style="color: inherit;"></a>
		</span>
		<h3 class="panel-title">
			@{
				var htmlattr = ViewBag.CurrentSession != null ? new {target = "_blank"} : null; // Im Sitzungsmodus target=_blank
			}
			@Html.ActionLink(Model.Title, "Details", "Topics", new {id = Model.ID, Area = ""}, htmlattr)
			@foreach (var tag in Model.Tags)
			{
				@Html.DisplayFor(model => tag.Tag)
			}
		</h3>
		<p class="panel-title">@Model.SessionType.Name</p>
	</div>
	<div id="topicContent_@Model.ID" class="topic-content collapse in">
		<div class="panel-body">
			<div class="col-md-6">
				<h6>@Html.DisplayNameFor(model => model.Description):</h6>
				@Html.DisplayWithLinksFor(model => model.Description, "String_Multiline")
			</div>
			<hr class="visible-xs visible-sm" />
			<div class="col-md-6">
				<h6>@Html.DisplayNameFor(model => model.Proposal):</h6>
				@Html.DisplayWithLinksFor(model => model.Proposal, "String_Multiline")
			</div>
		</div>
		<div class="panel-separator" id="auditorlist_@Model.ID">
			@Html.Action("_List", "Votes", new {topic = Model, Area = "", linkLevel = ViewBag.CurrentSession != null ? VoteLinkLevel.Everyone : VoteLinkLevel.OnlyMine})
		</div>

		@{
			string classA = "collapsed";
			string classDiv = "panel-collapse collapse";

			if (Model.Comments.Count < 2 || Model.IsReadOnly) // Sektion ausklappen
			{
				classA = null;
				classDiv = "panel-collapse collapse in";
			}
		}
		<div class="panel panel-primary comment-panel">
			<div class="panel-heading panel-collapse-heading" style="position: relative;">
				<h4 class="panel-title">
					<a onclick=" toggleSection(this, '#comments_@Model.ID'); " class="@classA">
						@if (@Model.Comments.Count == 0)
						{
							@:Keine Kommentare
						}
						else if (@Model.Comments.Count == 1)
						{
							@:Ein Kommentar
						}
						else
						{
							@Model.Comments.Count
							@:Kommentare
						}
						<span class="divlink"></span>
					</a>
				</h4>
			</div>
			<div id="comments_@Model.ID" class="@classDiv">
				@Html.Action("_List", "Comments", new {topic = Model, Area = ""})
			</div>
		</div>
		<div class="panel-footer">
			@if (@Model.Documents.Count(doc => doc.Deleted == null) == 0)
			{
				@:Keine Dokumente vorhanden
			}
			else
			{
				@Html.Action("_List", "Attachments", new {entityKind = DocumentContainer.Topic, id = Model.ID, makeList = true, Area = ""})
			}
		</div>
	</div>
</div>

@using (Html.Delayed(null, "CollapseComments"))
{
	<script type="text/javascript">
		function collapseTopicOut(link, content) {

			content.slideDown(400, "easeOutQuad", function() { PerformMasonryLayout(); });
			link.removeClass("collapsed");
		}

		function collapseTopicIn(link, content) {

			content.slideUp(400, "easeOutQuad", function() { PerformMasonryLayout(); });
			link.addClass("collapsed");
		}

		function toggleSection(sender, selector) {
			if ($(sender).hasClass("collapsed")) { // Ausklappen

				$(selector).show(); // Workaround, damit sich die GUI-Elemente nicht während der Animation überlappen
				PerformMasonryLayout();
				$(selector).hide();

				collapseTopicOut($(sender), $(selector));
			} else { // Einklappen
				collapseTopicIn($(sender), $(selector));
			}
		}
	</script>
}