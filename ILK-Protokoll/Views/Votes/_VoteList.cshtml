@using ILK_Protokoll.Models
@using ILK_Protokoll.util
@model IEnumerable<ILK_Protokoll.Models.Vote>

@helper GetVoteIcon(VoteKind vk)
{
	string iconname = "";
	switch (vk)
	{
		case VoteKind.None:
			iconname = "glyphicon-record";
			break;

		case VoteKind.Approved:
			iconname = "glyphicon-ok-sign";
			break;

		case VoteKind.Reservation:
			iconname = "glyphicon-question-sign";
			break;

		case VoteKind.Rejected:
			iconname = "glyphicon-remove-sign";
			break;
	}
	<span class="glyphicon @iconname" title="@vk.GetDescription()"></span>
}
@* Für die eigene Stimme *@
@helper GetVoteLink(VoteKind vk)
{
	<a href="/Votes/_Register?TopicID=@ViewBag.TopicID&amp;vote=@vk.DisplayName()"
	   data-ajax="true"
	   data-ajax-method="POST"
	   data-ajax-mode="replace"
	   data-ajax-update="#auditorlist_@ViewBag.TopicID"
	   data-ajax-failure="DisplayErrorMessage('#auditorlist_@ViewBag.TopicID', 'Die Stimme konnte nicht verarbeitet werden.');"
	   class="votelink">@GetVoteIcon(vk)</a>
}
@* Für Abstimmen in Vertretung *@
@helper GetVoteLink2(User voter, VoteKind vk)
{
	<a data-ajax="true" data-ajax-method="POST" data-ajax-mode="replace" data-ajax-update="#auditorlist_@ViewBag.TopicID" class="votelink" href="/Votes/_Register2?TopicID=@ViewBag.TopicID&amp;VoterID=@voter.ID&amp;vote=@vk.DisplayName()">@GetVoteIcon(vk)</a>
}

<ul class="auditorlist">
	@{
		var ownvote = ViewBag.ownvote as Vote;
		if (ownvote != null)
		{
			<li class="ownvote">
				<div class="popover-markup">
					<a class="trigger" id="ownvote_@ViewBag.TopicID">
						@GetVoteIcon(ownvote.Kind) @ViewBag.CurrentUser.Name
					</a>
					<div class="content hide votelinks">
						@GetVoteLink(VoteKind.None)
						@GetVoteLink(VoteKind.Approved)
						@GetVoteLink(VoteKind.Reservation)
						@GetVoteLink(VoteKind.Rejected)
					</div>
				</div>
			</li>
		}
	}
	@if (ViewBag.LinkAllAuditors != null && (bool) ViewBag.LinkAllAuditors)
	{
		foreach (Vote vote in Model)
		{
			<li>
				<div class="popover-markup">
					<a class="trigger">
						@GetVoteIcon(vote.Kind) @vote.Voter
					</a>
					<div class="content hide votelinks">
						@GetVoteLink2(vote.Voter, VoteKind.None)
						@GetVoteLink2(vote.Voter, VoteKind.Approved)
						@GetVoteLink2(vote.Voter, VoteKind.Reservation)
						@GetVoteLink2(vote.Voter, VoteKind.Rejected)
					</div>
				</div>
			</li>
		}
	}
	else
	{
		foreach (Vote vote in Model)
		{
			<li>
				@GetVoteIcon(vote.Kind)
				@vote.Voter
			</li>
		}
	}
</ul>

<script type="text/javascript">
	if (enablePopovers)
		enablePopovers();
</script>